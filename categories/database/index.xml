<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataBase on fyzn12</title>
    <link>https://fyzn12.github.io/categories/database/</link>
    <description>Recent content in DataBase on fyzn12</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql的存储引擎</title>
      <link>https://fyzn12.github.io/post/database/mysql%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/database/mysql%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description> 1 mysql支持Innodb存储引擎（支持行锁）  1.1 Innodb存储引擎概述 ① Innodb存储引擎：主要面向在线事务处理（OLTP）方面的应用。特点是行锁设计、支持外键，并支持类似于Oracle的非锁定读，即默认情况下读取操作不会产生锁。
② InnoDB通过多版本并发控制（MVCC）来获取高并发，并实现了SQL标准的4种隔离级别，默认是repeatable级别。
③ 使用next-key locking（临键锁）的策略来避免幻读，准确来说是临键锁加间隙锁的策略避免幻读。 这也就是为什么下面提到的非唯一索引字段数据库使用行级锁却锁定的是多行，这与间隙锁有关
④ Innodb存储引擎的行锁是通过给索引项加锁实现，这一点musql和oracle不同，后者是通过在数据库中给对应的数据行加锁实现。
⑤ Innodb存储引擎这种行级锁决定，只有通过索引条件来检查数据，才能使用行级锁，否则将直接用表级锁。
 特别注意：使用行级锁一定要使用索引；查询非唯一索引字段数据库使用行级锁锁定多行，这个与数据库的  1.2 Innodb存储引擎内存 组成：缓冲池（buffer pool）、重做日志缓冲池（redo log buffer）以及额外的内存池（additional memory pool），分别由配置文件中的参数innodb_buffer_pool_size和innodb_log_buffer_size大大小决定。
缓冲池是占最大块内存的部分，用来存放各种数据的缓存。
Innodb存储引擎的工作方式：将数据库文件按页（每页16K）读取到缓冲池，然后按最近最久未使用（LRU）的算法来保留在缓冲池中的缓存数据。如果数据库文件需要修改，总是首先修改在缓存池中的页（发生修改后，该页即为脏页），然后再按照一定的频率将缓冲池的脏页刷新（flush）到文件。可以通过命令：show engine innodb status来查看innodb_buffer_pool的具体情况。
1.3 master thread innoDB存储引擎的主要工作都是在一个单独的后台线程master thread中完成。
master thread 的线程优先级别最高。其内部由几个循环（loop）组成：主循环、后台循环、刷新循环、暂停循环。
 2 MyISAM存储引擎  MyISAM存储引擎是mysql官方提供的存储引擎。其特点是不支持事务、表锁和全文索引，对于一些OLAP（在线分析处理）操作速度快。
MyISAM存储引擎表有MYD和MYI组成，MYD用来存储数据文件，MYI用来存放索引文件。
 </description>
    </item>
    
    <item>
      <title>mysql基础底层</title>
      <link>https://fyzn12.github.io/post/database/mysql/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/database/mysql/</guid>
      <description>MYSQL的一些基础底层
 1. 数据库应用的分类  一类是OLTP：在线事务处理，如博客、电子商务、网络游戏；
另一类OLAP：在线分析处理，如数据仓库、数据集市； 对于OLAP的应用，分区的确可以很好的提高查询的性能；
 2. MYSQL的慢查询  通过 long_query_time 设置阈值，默认是10，代表10秒； 默认情况下，mysql并不启动慢查询日志，需要手工设置 log_slow_queries设置为ON开启慢查询日志。
 3. InnoDB存储引擎表类型  在InnoDB存储引擎表中，每张表都有一个主键，如果在创建表时没有显示地定义主键，则InnoDB存储引擎会按如下的方式选择创建主键。
  寻找加了unique约束并且不为NULL的列设为主键。
 如果没有，把row_id作为主键
 InnoDB在每行记录都添加了三个隐藏字段
 DB_ROW_ID &amp;mdash;6个字节：行的标识；
 DB_TRX_ID &amp;mdash;6个字节：新增更新行的最后一个事务ID，自动递增（创建版本号，数据库的乐观锁相似）； DB_ROLL_PTR &amp;mdash;7个字节：回滚指针（删除版本号）
    4. MYSQL分区 1. 分区类型  range（范围） list（离散、不连续） hash（散列） key 子分区 &amp;ndash;在分区的基础上进行分区  关键字 subpartitions
 子分区数量必须相同
  columns分区
  2. 创建方式 create table `table_name`( a int,b int )engin=innodb partition by key(b) partition 4;  另外在MYSQL数据库中还支持一种称为linear hash的分区，他使用一个更加复杂的算法来确定新行插入已经分区表中的位置。 create table `table_name`( a int,b int; )engin=innodb partition by linear hash(b) partition 4; ---指定分区数    linear hash 的优点在于，增加、删除，合并和拆分将变得更加快捷，有利于处理含有大量数据的表；</description>
    </item>
    
    <item>
      <title>数据库的事务</title>
      <link>https://fyzn12.github.io/post/database/transaction/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/database/transaction/</guid>
      <description>1. 数据库的事务 1.1 什么是事务 作为单个逻辑工作单位的一系列操作，要么完全成功，要么完全失败。  1.2 事务的四大特征ACID  A Atomic(原子性)
事务中包含的操作被看作一个整体的业务单元，这样业务单元要么完全成功，要么完全失败。最小的单元  C Consistency(一致性)
事务在完成时，必须使所有的数据都保持一致状态，在数据库中所有的修改都基于事务，保证了数据的完整性  I Isolation(隔离性)
下面将会重点讲解隔离  D Durability(持久性)
事务结束后，所有的数据会固化到一个地方，如保存到磁盘中，即使断电后也可以提供给相应程序访问   1.3 事务的隔离级别  1.3.1 读未提交造成的脏读 是最低的隔离级别，其含义是允许一个事务读取另外一个事务没有提交的数据。未提交读是一种危险 的隔离级别，所以一般在我们实际的开发中应用不广，但是它的优点在于并发能力高，适合那些对数据 一致性没有要求而追求高并发的场景，它的最大坏处是出现脏读。让我们看看可能发生的脏读场景， 如表所示。   T3时刻，因为采用未提交读，所以事务2可以读取事务l未提交的库存数据为1,这里当它扣减 库存后则数据为0，然后它提交了事务，库存就变为了。，而事务l在TS时刻回滚事 务，因为第一类丢失更新已经被克服，所以它不会将库存回滚到2，那么最后的结果就变为了 0，这样就出现了错误。脏读一般是比较危险的隔离级别，在我们实际应用中采用得不多。 为了克服脏读的问题，数据库隔离级别还提供了读已提交（readcommited）的级别， 下面我们时论它。  1.3.2 读已提交 读已提交解决了读未提交造成的脏读问题，但读已提交依然造成了另外一个问题&amp;ndash;不可重复读 读已提交： 是指一个事务只能读取另外一个事务已经提交的数据，不能读取未提交的数据。   在T3时刻事务2读取库存的时候，因为事务l未提交事务，所以读出的库存为l，于是事务2 认为当前可扣减库存；在T4时刻，事务l己经提交事务，所以在TS时刻，它扣减库存的时候 就发现库存为0，于是就无法扣减库存了。这里的问题在于事务2之前认为可以扣减，而到扣 减那一步却发现已经不可以扣减，于是库存对于事务2而言是一个可变化的值，这样的现象 我们称为不可重复读，这就是读写提交的一个不足。为了克服这个不足，数据库的隔离级别 还提出了可重复读的隔离级别，它能够消除不可重读的问题。  1.3.3 可重复读  可以看到，事务2在T3时刻尝试读取库存，但是此时这个库存己经被事务1事先读取，所以这 个时候数据库就阻塞它的读取，直至事务1提交，事务2才能读取库存的值。此时己经是TS时 刻，而读取到的值为0，这时就已经无法扣减了，显然在读写提交中出现的不可重复读的场 景被消除了。但是这样也会引发新的问题的出现，这就是幻读。  下面演示造成幻读的实战  1.3.4 序列化 (串行化) 串行化（Serializable):是数据库最高的隔离级别，它会要求所有的SQL都会按照顺序执 行，这样就可以克服上述隔离级别出现的各种问题，所以它能够完全保证数据的一致性。 2.</description>
    </item>
    
    <item>
      <title>数据库易忘知识点总结</title>
      <link>https://fyzn12.github.io/post/database/database/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/database/database/</guid>
      <description>数据库的基本知识点
 1 数据库的基本常用知识点 1.1 在创建数据库时，指定数据库编码命令 create database ads character set &amp;#39;utf8&amp;#39; 如图所示   1.2 对数据表的操作  删除数据
语法：
delete from 表名 [where 条件]
注意：
* 如果不加条件，则删除表中所有记录。
* 如果要删除所有记录
delete from 表名&amp;mdash;不推荐使用。有多少条记录就会执行多少次删除操作。
* TRUNCATE TABLE 表名；&amp;ndash;推荐使用，效率更高，先删除表，然后创建相同的表。
 update 表名 set 列名1 = 值1，列名2 = 值2，&amp;hellip;[where 条件]; 注意：如果不加条件，则会修改所有的记录；
 多表查询取出重复的行
关键字 distinct  DQL：查询语句
 排序查询
语法：order by 子句
排序方式： ASC：升序；DESC：降序
注意：如果有多个排序条件，则当前的条件值一样时，才会判断第二个条件。
 聚合函数：
（1）count：计算个数
（2）max
（3）min
（4）sum</description>
    </item>
    
    <item>
      <title>数据库易忘知识点总结</title>
      <link>https://fyzn12.github.io/post/database/%E5%AF%BC%E5%87%BA%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/database/%E5%AF%BC%E5%87%BA%E7%BB%93%E6%9E%84/</guid>
      <description>根据数据表，导出数据结构
 SELECT COLUMN_NAME 列名, COLUMN_TYPE 数据类型, DATA_TYPE 字段类型, CHARACTER_MAXIMUM_LENGTH 长度, IS_NULLABLE 是否为空, COLUMN_DEFAULT 默认值, COLUMN_COMMENT 备注 FROM INFORMATION_SCHEMA. COLUMNS WHERE &amp;ndash; super_express为数据库名称，到时候只需要修改成你要导出表结构的数据库即可 table_schema = &amp;lsquo;super_express&amp;rsquo; AND &amp;ndash; s_patient_list为表名，到时候换成你要导出的表的名称 &amp;ndash; 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称 table_name = &amp;lsquo;user&amp;rsquo;</description>
    </item>
    
  </channel>
</rss>