<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on fyzn12</title>
    <link>https://fyzn12.github.io/categories/java/</link>
    <description>Recent content in java on fyzn12</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SynchronizedMap如何让HashMap具备线程安全</title>
      <link>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/synchronizedmap%E5%A6%82%E4%BD%95%E8%AE%A9hashmap%E5%85%B7%E5%A4%87%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/synchronizedmap%E5%A6%82%E4%BD%95%E8%AE%A9hashmap%E5%85%B7%E5%A4%87%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</guid>
      <description>问题：SynchronizedMap如何让HashMap具备线程安全  1. 首先利用SynchronizedMap的构造函数获取map的对象，而该构造器可以传入一个HashMap的集合作为参数 2. SynchronizedMap底层通过一个互斥信号量mutex（final Object） 进行方法同步的限定， synchronized（mutex）进行加锁，达到线程同步的效果,如下源码所示
SynchronizedMap(Map&amp;lt;K,V&amp;gt; m) { if (m==null) throw new NullPointerException(); this.m = m; mutex = this; } SynchronizedMap(Map&amp;lt;K,V&amp;gt; m, Object mutex) { this.m = m; this.mutex = mutex; } public int size() { synchronized(mutex) {return m.size();} } public boolean isEmpty(){ synchronized(mutex) {return m.isEmpty();} } public boolean containsKey(Object key) { synchronized(mutex) {return m.containsKey(key);} }  3.使用方式：  Map&amp;lt;String,Long&amp;gt; user = Collections.synchronizedMap(new HashMap&amp;lt;&amp;gt;()); user.put(&amp;#34;xsj&amp;#34;,1234567l); System.</description>
    </item>
    
    <item>
      <title>xml字符编码规范</title>
      <link>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/xml%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/xml%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description> xml字符编码规范
 &amp;lt; &amp;lt;(小于) &amp;gt; &amp;gt;(大于) &amp;amp; &amp;amp;(和) &amp;apos; &amp;lsquo;(单引号) &amp;quot; &amp;ldquo;(双引号)   </description>
    </item>
    
    <item>
      <title>JVM</title>
      <link>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/jvm/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/jvm/</guid>
      <description>jvm初学篇
 1 JVM的启动流程  通过编辑器将java代码编辑好之后编译成java字节码，也就是.class文件；
 装载JVM 会通过当前路径或者系统的版本去寻找 JVM.cfg文件； 通过JVM.cfg文件寻找到 JVM.dll文件 &amp;mdash;该文件是JVM的具体实现；
 初始化本地接口 JNI &amp;mdash;如Env接口 JNI接口的作用就是负责将.class文件装载到JVM中；
 找到main方法并执行
   2 JVM的内存分区  1 PC寄存器  &amp;mdash; 每个线程拥有一个PC寄存器
 &amp;mdash; 在线程创建时 创建（PC寄存器）
 &amp;mdash; 指向下一条指令的地址
 &amp;mdash; 执行本地方法时，PC的值为undefined（未定义）  2 方法区  &amp;mdash; 保存装载的类信息
 类型的常量池 &amp;mdash;&amp;ndash; 这一点得注意 ： 在JDK6时，String等常量信息是保存在方法区，但是在JDK7时，已经移到了堆； 字段、方法信息
 方法字节码
  &amp;mdash; 线程共享
 &amp;mdash; 通常和永久区（Perm：保存一些相对来说静止稳定的数据）关联在一起
  3 Java堆  &amp;mdash; 和程序开发密切相关</description>
    </item>
    
    <item>
      <title>JVM初始化初步理解</title>
      <link>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/jvm%E5%88%9D%E5%A7%8B%E5%8C%96%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java%E5%9F%BA%E7%A1%80/jvm%E5%88%9D%E5%A7%8B%E5%8C%96%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description> 要了解JVM首先得了解JVM如何创建，然后深入JVM的内存分析
首先java程序在执行时会被编译成java字节码即.class文件
————&amp;gt;其次加载配置文件 jvm.cfg（会根据系统的版本去寻找该配置文件）
————&amp;gt;根据加载后的配置文件找到 jvm.dll文件，该文件是 jvm 的主要实现
————&amp;gt; 初始化java本地接口JNI接口
————&amp;gt; 找到main方法，执行程序
 注意JNI的作用：当一个程序被编译成java字节码之后是保存在硬盘中，而JVM是如何从硬盘中找到该.class文件， JNI接口的作用就是将该.class文件装载到JVM中，然后才能找到main方法执行程序，所以JNI接口的作用 非常重要。 进而是如何装载.class文件的下面继续详细介绍  JVM 的思维导图如下图所示
  </description>
    </item>
    
  </channel>
</rss>