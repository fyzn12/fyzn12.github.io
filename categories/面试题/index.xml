<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试题 on fyzn12的博客</title>
    <link>https://fyzn12.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <description>Recent content in 面试题 on fyzn12的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>认真刷面试题的第一天</title>
      <link>https://fyzn12.github.io/post/faceword/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/faceword/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>问题描述：
给定一个数组arr，返回arr的最长无的重复子串的长度(无重复指的是所有数字都不相同)。
例如： 输入：[2,3,4,5] 输出：4 输入：[2,2,3,4,3] 输出：3
   public int maxLength (int[] arr) { // write code here  Map&amp;lt;Integer,Integer&amp;gt; map = new LinkedHashMap&amp;lt;&amp;gt;(); if(arr==null || arr.length==0) return 0; if(arr.length==1)return 1; int left = 0,right = 0,max=0; for(int tmp = 0;right&amp;lt;arr.length;right++){ int cur = arr[right]; if(map.containsKey(cur) &amp;amp;&amp;amp; map.get(cur) &amp;gt;= left){ tmp = right-left; left = map.get(cur)+1; } if(max==0 &amp;amp;&amp;amp; tmp == 0 &amp;amp;&amp;amp; (right+1)== arr.length){ // 解决数组从第一个到最后一个都是不一样的数据长度问题  max = right-left+1; } map.</description>
    </item>
    
    <item>
      <title>认真刷面试题的第一天</title>
      <link>https://fyzn12.github.io/post/faceword/firstday/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/faceword/firstday/</guid>
      <description>牛客网的第一天
 1 关于java的异常处理机制：当某个线程抛出OutOfmemberError时，其他线程有可能不收影响 2 关于运算的理解  与运算（&amp;amp;）
进行运算的两个数据，按二进制位进行“与”运算。 规则：0&amp;amp;0=0; 0&amp;amp;1=0; 1&amp;amp;0=0; 1&amp;amp;1=1; 即： 两位同时为“1”，结果才为“1”，否则为0  或运算（|）
进行运算的两个数据，按二进制位进行“或”运算。 运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1； 即 ：参加运算的两个对象只要有一个为1，其值为1。  非运算：~
1取0，0取1 ~1 = 0, ~0 = 1 ~(10001) = 01110  异或运算（^）
参加运算的两个数据，按二进制位进行&amp;#34;异或&amp;#34;运算 参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。 考点：交换两个变量的值（不借助第三个变量） 使用异或运算符： 例：a=6,b=5 核心代码： a = a ^ b; b = a ^ b; a = a ^ b;   经过上面的介绍下面这些运算应该就能理解了java中的 |= 、&amp;amp;= 、^= 运算符的理解
3 filesort 并不是磁盘文件进行排序，只是进行了一个排序操作，但是查询次数过多确实会对性能造成影响 4 在java中是不能强制垃圾回收器立即执行的，system.</description>
    </item>
    
  </channel>
</rss>