<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jar on fyzn12</title>
    <link>https://fyzn12.github.io/tags/jar/</link>
    <description>Recent content in jar on fyzn12</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/tags/jar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux部署springboot的jar包</title>
      <link>https://fyzn12.github.io/post/java/linux%E9%83%A8%E7%BD%B2springboot%E7%9A%84jar%E5%8C%85/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java/linux%E9%83%A8%E7%BD%B2springboot%E7%9A%84jar%E5%8C%85/</guid>
      <description>linux部署springboot的jar包 执行jar包的命令和在windows操作系统上是一样  java -jar jarName-0.0.1-SNAPSHOT.jar
 注: 关闭服务器连接时会关闭此程序进程,（推荐测试可用）  将jar程序设置成后台运行，并且将标准输出的日志重定向至文件msg.log(可以自定义)  nohup java -jar jarName-0.0.1-SNAPSHOT.jar &amp;gt;msg.log 2&amp;gt;&amp;amp;1 &amp;amp;
 详解： nohup nohup命令运行由Command参数和任何相关的Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。 在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup命令，添加 &amp;amp;（表示“and”的符号）到命令的尾部。 nohup是no hang up的缩写，就是不挂断的意思。 nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。 在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。 nohup和&amp;amp;的区别 &amp;amp;：指在后台运行,但当用户推出(挂起)的时候，命令自动也跟着退出 nohup：不挂断的运行，注意并没有后台运行的功能，，就是指，用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系， 例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;amp;才是后台运行。 nohup java -jar jarName-0.0.1-SNAPSHOT.jar &amp;gt;msg.log 2&amp;gt;&amp;amp;1 &amp;amp;; 在上面的例子中，0：stdin (standard input)，1：stdout (standard output)，2：stderr (standard error)； 2&amp;gt;&amp;amp;1是将标准错误（2）重定向到标准输出（&amp;amp;1），标准输出（&amp;amp;1）再被重定向输入到msg.</description>
    </item>
    
    <item>
      <title>Synchronized底层实现</title>
      <link>https://fyzn12.github.io/post/java/lock/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java/lock/</guid>
      <description>java创建对象  new Object()创建对象时在内存中的分布&amp;ndash;正对于64位   1. 对象头  1) mark word：标记字段 32位长度为32bit，64位系统上长度为64bit
 hashcode、GC分代年龄、锁信息（锁标志、锁记录）等  在32位系统上mark word长度为32bit，64位系统上长度为64bit。为了能在有限的空间里存储下更多的数据，其存储格式是不固定的，在32位系统上各状态的格式如下：
可以看到锁信息也是存在于对象的mark word中的。
&amp;gt; * 当对象状态为偏向锁（biasable）时，mark word存储的是偏向的线程ID；
&amp;gt; * 当状态为轻量级锁（lightweight locked）时，mark word存储的是指向线程栈中Lock Record的指针；
&amp;gt; * 当状态为重量级锁（inflated）时，为指向堆中的monitor对象的指针。
 2) klass word ：类型指针
3) array size ：数组对象：数组长度
 2. 实例数据  所有属性加起来的大小
 3.对齐填充  实例数据不一定有，取决于实例数据，针对于JVM来说实例数据是8的整数倍，当实例数据不满足这一条件时，对其填充会将其补足为8的整数倍。
如对象属性加起来为63字节，那么对其填充就是1字节，则实例数据就是64字节。
 重量级锁  重量级锁是我们常说的传统意义上的锁，其利用操作系统底层的同步机制去实现Java中的线程同步。
重量级锁的状态下，对象的mark word为指向一个堆中monitor对象的指针。
一个monitor对象包括这么几个关键字段：cxq（下图中的ContentionList），EntryList ，WaitSet，owner。
其中cxq ，EntryList ，WaitSet都是由ObjectWaiter的链表结构，owner指向持有锁的线程。
  当一个线程尝试获得锁时，如果该锁已经被占用，则会将该线程封装成一个ObjectWaiter对象插入到 cxq 的队列尾部，然后暂停当前线程。当持有锁的线程释放锁前，会将cxq中的所有元素移动到EntryList中去，并唤醒EntryList的队首线程。</description>
    </item>
    
  </channel>
</rss>