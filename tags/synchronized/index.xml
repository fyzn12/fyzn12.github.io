<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>synchronized on fyzn12</title>
    <link>https://fyzn12.github.io/tags/synchronized/</link>
    <description>Recent content in synchronized on fyzn12</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/tags/synchronized/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>volatile底层实现</title>
      <link>https://fyzn12.github.io/post/java/volatile%E5%92%8Csynchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/java/volatile%E5%92%8Csynchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      <description> volatile 硬件屏障  各个硬件的内存屏障不同
 内存屏障  LoadLoad屏障
对于这样的语句 Load1;LoadLoad;Load2;
在Load2及后续读取操作要读取得数据被访问前，保证Load1要读取的数据被读取完毕。
 StoreStore屏障
对于这样的语句 Store1;StoreStore;Store2;
在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。
 LoadStore屏障
对于这样的语句 Load1;LoadStore;Store2;
在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。
 StoreLoad屏障
对于这样的语句 Store1;StoreLoad;Load2;
在Load2及后续所有读取操作执行前，保证Store1的写入对所有的处理器可见
  volatile的实现细节  字节码层面
ACC_VOLATILE 加了这样一个标识
 JVM层面 &amp;ndash;读取到字节码上的ACC_VOLATILE标识加下面的内存屏障
StoreStoreBarrier LoadLoadBarrier 内存
volatile写操作 volatile读操作
StoreStoreBarrier LoadLoadBarrier 内存
也就是在volatile内存区的读写都加屏障
 OS和硬件层面
需要用hsdis查看
windows 就是lock指令实现
  synchronized的实现  字节码层面
ACC_SYNCHRONIZED 标识
monitorenter 实现
monitorexit 实现
 JVM层面
C 和C++调用操作系统提供的同步机制
 OS和硬件层面
lock指令
  </description>
    </item>
    
  </channel>
</rss>