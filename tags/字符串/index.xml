<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串 on fyzn12的博客</title>
    <link>https://fyzn12.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
    <description>Recent content in 字符串 on fyzn12的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>字符串变形</title>
      <link>https://fyzn12.github.io/post/algorithm/%E5%AD%97%E7%AC%A6%E8%BD%AC%E7%9A%84%E5%8F%98%E5%BD%A2/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E5%AD%97%E7%AC%A6%E8%BD%AC%E7%9A%84%E5%8F%98%E5%BD%A2/</guid>
      <description>1. 解决此题的关键是如何将大小写字符转换 1.1 判断 字符是a-z 或者 A-Z是关键  每一个字符都有一个对应的ASII码，因此可以利用这一点来做
 1.2 大小写转换  将字符串从小写转换为大写可以如下表达：
ch[j] = (char)(ch[j]-&amp;lsquo;a&amp;rsquo;+&amp;lsquo;A&amp;rsquo;);
将字符串从大写转换为小写可以如下表达：
ch[j] = (char)(ch[j] -&amp;lsquo;A&amp;rsquo;+&amp;lsquo;a&amp;rsquo;);
题目描述如下
  public String trans(String s, int n) { // write code here  String[] str = s.split(&amp;#34; &amp;#34;,-1); StringBuilder res = new StringBuilder(); for(int i = str.length-1;i&amp;gt;=0;i--){ String tmp = str[i]; char[] ch = tmp.toCharArray(); for(int j = 0;j&amp;lt;ch.length;j++){ if(ch[j]&amp;gt;=&amp;#39;a&amp;#39; &amp;amp;&amp;amp; ch[j]&amp;lt;=&amp;#39;z&amp;#39;) ch[j] = (char)(ch[j]-&amp;#39;a&amp;#39;+&amp;#39;A&amp;#39;); else if(ch[j] &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; ch[j]&amp;lt;=&amp;#39;Z&amp;#39;) ch[j] = (char)(ch[j] -&amp;#39;A&amp;#39;+&amp;#39;a&amp;#39;); } res.</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://fyzn12.github.io/post/algorithm/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>最经典的就是寻找最长回文子串的问题
解题思想：回文子串的详细思路 在上面的链接中，对该问题做了很详细的思路讲解 下面自己实现采用 Manacher 算法，被中国程序员戏称为“马拉车”算法。它专门用于解决“最长回文子串”问题，时间复杂度为O(N) 。
 public int getLongestPalindrome(String A, int n) { // 做字符串的预处理  String str = changeStr(A,&amp;#39;#&amp;#39;); // 定义左跳跃的指针和右跳跃的指针以及最长回文串的返回值  int left=0,right=0,max=0; for(int i = 1;i&amp;lt;str.length();i++) { //判断每一步扩散的步数  right = i + 1; left = i - 1; int count = 0; while (left &amp;gt;= 0 &amp;amp;&amp;amp; right &amp;lt; str.length() &amp;amp;&amp;amp; str.charAt(left) == str.charAt(right)) { count++; left--; right++; } max = max &amp;gt; count ?</description>
    </item>
    
  </channel>
</rss>