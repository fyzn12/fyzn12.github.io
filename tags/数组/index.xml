<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 on fyzn12的博客</title>
    <link>https://fyzn12.github.io/tags/%E6%95%B0%E7%BB%84/</link>
    <description>Recent content in 数组 on fyzn12的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/tags/%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二维数组中由1构成的最大正方形</title>
      <link>https://fyzn12.github.io/post/algorithm/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%94%B11%E6%9E%84%E6%88%90%E7%9A%84%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%94%B11%E6%9E%84%E6%88%90%E7%9A%84%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
      <description>题目描述：给定一个由0和1组成的2维矩阵，返回该矩阵中最大的由1组成的正方形的面积
 示例1  输入：[[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]
返回值：4
本体知识点：动态规划
1.初步分析如下 1.确定dp[][]数组的含义 此题的dp[i][j]，代表以坐标为(i,j)的元素为右下角的正方形的边长。
2.状态转移方程 dp[i][j]的值取决于dp[i-1][j],dp[i-1][j-1],dp[i][j-1]的最小值 即左方正方形的边长，左上方正方形的边长，上方正方形的边长三者的最小值。
3.边界 由于状态转移方程中涉及i-1，j-1，所以i和j一定要大于0. 故dp[0][] 和 dp[][0]要首先确定。
 /** * 最大正方形 * @param matrix char字符型二维数组 * @return int整型 */ public int solve (char[][] matrix) { //判断二维数组是否有效 	if(matrix.length == 0 || matrix[0].length==0)return 0; int rows = matrix.length; int cols = matrix[0].lenght; int max; //声明数组 	int[][] dp = new int[rows][cols]; //确定边界值 	for(int i = 0;i&amp;lt;rows;i++){ if(matrix[i][0] == &amp;#39;1&amp;#39;)dp[i][0] = 1; } for(int j = 0;j&amp;lt;cols;j++){ if(matrix[0][j]==&amp;#39;1&amp;#39;)dp[0][j] = 1; } //确定中间值 	for(int i = 1; i &amp;lt; rows;i++){ for(int j = 1;j&amp;lt;cols;j++){ if(matrix[i][j]==&amp;#39;1&amp;#39;){ dp[i][j] = Math.</description>
    </item>
    
    <item>
      <title>矩阵的最小路路径</title>
      <link>https://fyzn12.github.io/post/algorithm/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E8%B7%AF%E5%BE%84/</guid>
      <description>求解最值问题利用动态规划算法解决  题目描述：给定一个 n * m 的矩阵 a，从左上角开始每次只能向右或者向下走，最后到达右下角的位置，路径上所有的数字累加起来就是路径和，输出所有的路径中最小的路径和。
示例1：
输入：[[1,3,5,9],[8,1,3,4],[5,0,6,1],[8,8,4,0]]
返回值：12
备注：1≤n,m≤2000
 思路分析：  求最值问题首先就是构建辅助数组dp
路径的走向只能是向右或者是向下，则可以将没有元素的对于的和求解出来构建一个新的二维表
二维表中国填写当前值与前一次值之和，取左下右上的两值的最小值与当前值求和填充表格
 /** * * @param matrix int整型二维数组 the matrix * @return int整型 */ public int minPathSum (int[][] matrix) { if(matrix==null)return 0; //构建列 	int row = matrix.length; int column = matrix[0].length; //构建列的值 	for(int i = 1;i&amp;lt;row;i++)matrix[i][0] = matrix[i-1][0]+matrix[i][0]; //构建行的值 	for(int j = 1;j&amp;lt;column;j++)matrix[0][j] = matrix[0][j-1] + matrix[0][j]; //填充中间数据 	for(int i = 1;i&amp;lt;row;i++){ for(int j=1;j&amp;lt;column;j++) matrix[i][j] = Math.</description>
    </item>
    
    <item>
      <title>二分法使用无符号位右移运算求解上中位数</title>
      <link>https://fyzn12.github.io/post/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E8%8E%B7%E5%8F%96/</guid>
      <description>获取中间值的方式一般是 int mid = left + (right-left)/2; 如果要求偶数时中位数取后一位时，需要将（right-left+1） 效率更高如下： int mid = left + ((right-left)&amp;gt;&amp;gt;1);
 1.有符号右移 &amp;gt;&amp;gt;  有符号右移：右移之后，左边补上符号为，正数补0，负数补1.
 2.无符号位右移 &amp;gt;&amp;gt;&amp;gt;  无符号右移： 右移之后， 无论该数是正数还是负数， 右移之后左边都是补上0。
 3.左移 &amp;lt;&amp;lt;  左移不区分有符号和无符号， 都是左移之后右边补上0， 最左边的符号位也直接移走。
 4.计算除法时（2的n次方）可以使用有符号的右移  20 的二进制位 10100 有符号位右移2位后为 101 十进制解释表示为 20&amp;frasl;4=5（取整）
20 的二进制位 10100 左移2位后 1010000 十进制结果为81
 5.判奇数偶数的方法  (num &amp;amp; 1) == 0表示为偶数 (num &amp;amp; 1) == 1表示为奇数
 这里注意一个遇到的坑 使用 int mid = left + ((right-left)&amp;gt;&amp;gt;1); 时切记+号后面是加一个整体，因此需要将((right-left)&amp;gt;&amp;gt;1)括起来。 6.</description>
    </item>
    
    <item>
      <title>扑克牌问题</title>
      <link>https://fyzn12.github.io/post/algorithm/%E6%89%91%E5%85%8B%E7%89%8C%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E6%89%91%E5%85%8B%E7%89%8C%E9%97%AE%E9%A2%98/</guid>
      <description>题目描述：LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)&amp;hellip;他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子&amp;hellip;..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。
输入：[0,3,2,6,4]
输出：true
解题思路：
我们分两种情况考虑， 一. 如果vector中不包含0的情况： 那么如何判断呢？因为需要是顺子，所以首先不能有重复值， 如果没有重复值，那么形如[1 2 3 4 5] [5 6 7 8 9]， 会发现最大值与最小值的差值应该小于5.
二. 如果数组中包含0： 发现除去0后的值，判断方法和1中是一样的。
所以根据如上两个条件，算法过程如下： 1. 初始化一个set，最大值max_ = 0, 最小值min_ = 14 2. 遍历数组， 对于大于0的整数，没有在set中出现，则加入到set中，同时更新max, min 3. 如果出现在了set中，直接返回false 4. 数组遍历完，最后再判断一下最大值与最小值的差值是否小于5
 方法1 使用set集合，利用set集合不可重复特性解决问题 public boolean isContinuous(int [] numbers) { if(numbers==null || numbers.length==0) return false; Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;(); int max = 0,min = 14; for(int num:numbers){ if(num&amp;gt;0){ if(set.</description>
    </item>
    
    <item>
      <title>旋转数组的问题</title>
      <link>https://fyzn12.github.io/post/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E6%97%8B%E8%BD%AC%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E6%97%8B%E8%BD%AC%E9%97%AE%E9%A2%98/</guid>
      <description>1.数组一次旋转的问题  题目描述：
  1.1 题目分析  处于递增：low上移
 处于递减：high下移（如果是high-1，则可能会错过最小值，因为找的就是最小值）
 其余情况：low++缩小范围
   1.2 根据算法分析，编写程序实现如下 public int minNumberInRotateArray(int [] array) { int left = 0,right = array.length-1,mid; while(left&amp;lt;right){ mid = left + ((right-left)&amp;gt;&amp;gt;1); if(array[mid]&amp;gt;array[right]){ left = mid+1; }else{ right = mid; } } return array[right]; }  2. 数组变换找目标值的问题  题目描述：给出一个转动过的有序数组，你事先不知道该数组转动了多少 (例如,0 1 2 4 5 6 7可能变为4 5 6 7 0 1 2). 在数组中搜索给出的目标值，如果能在数组中找到，返回它的索引，否则返回-1。 假设数组中不存在重复项。</description>
    </item>
    
    <item>
      <title>在无序数组中找出最小的正整数</title>
      <link>https://fyzn12.github.io/post/algorithm/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%89%BE%E6%9C%AA%E5%87%BA%E7%8E%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B4%E6%95%B0%E5%80%BC/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%89%BE%E6%9C%AA%E5%87%BA%E7%8E%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B4%E6%95%B0%E5%80%BC/</guid>
      <description> /** * return the min number * @param arr int整型一维数组 the array * @return int整型 */ public int minNumberdisappered (int[] arr) { // write code here  Arrays.sort(arr); int min = 1; for(int i = 0;i&amp;lt;arr.length;i++){ if(arr[i]==min) min++; } return min; } </description>
    </item>
    
    <item>
      <title>对数组中寄偶数据的处理</title>
      <link>https://fyzn12.github.io/post/algorithm/%E6%95%B4%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E5%A5%87%E5%81%B6%E6%95%B0%E6%8E%92%E5%88%97/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E6%95%B4%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E5%A5%87%E5%81%B6%E6%95%B0%E6%8E%92%E5%88%97/</guid>
      <description>类型一：给定一个整形数组，将数组中的数据按奇数排列在前，偶数排列在后
解题思路：定义两个指针，从前后开始遍历数组，遇到前后奇偶位置不匹配的，将其交换位置
 public void changeArr(int[] arr) { if (arr == null || arr.length == 0) { return; } int left = 0, right = arr.length - 1; while (left &amp;lt; right) { while ((arr[left] &amp;amp; 1) == 1 &amp;amp;&amp;amp; left &amp;lt; right) { left++; } while ((arr[right] &amp;amp; 1) == 0 &amp;amp;&amp;amp; left &amp;lt; right) { right--; } if (left &amp;lt; right) { arr[left] ^= arr[right]; arr[right] ^= arr[left]; arr[left] ^= arr[right]; } } }   类型二：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://fyzn12.github.io/post/algorithm/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E6%95%B0%E7%BB%84/</guid>
      <description>总结与数组有关的算法题：
数组的概念：占据一块连续的内存，并按照顺序存储数组。
算法题： 在一个二维数组中，每一行都按照从左右到右顺序排序，每一列从上到下都按照顺序排序。给定一个数，若存在于数组中则返回true
 public static Boolean checkNum(int[][] arr,int target){ int row = 0; int column = arr[0].length-1; while (row&amp;lt;arr.length &amp;amp;&amp;amp; column &amp;gt;=0){ if (arr[row][column]==target){ return true; } if (arr[row][column]&amp;gt;target){ column--; }else { row++; } } return false; }  1.判断一个数是奇数还是偶数的方法  使用除2取余的方式 如 4%2 判断余数是否为0，是则为偶数，不是则为奇数 将判断的数与1做按位与运算，结果为1则为奇数，为0则为偶数
  2.交换两个数字的位置  使用第三变量 如 int tmp = a; a = b;b = tmp; 使用异或运算 如 a ^= b; b ^= a; a ^= b;这样既可将两个数字交换位置</description>
    </item>
    
  </channel>
</rss>