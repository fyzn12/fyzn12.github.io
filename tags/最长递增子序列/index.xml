<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>最长递增子序列 on fyzn12的博客</title>
    <link>https://fyzn12.github.io/tags/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</link>
    <description>Recent content in 最长递增子序列 on fyzn12的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fyzn12.github.io/tags/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于Arrays.binarySearch解决最长递增子序列</title>
      <link>https://fyzn12.github.io/post/algorithm/%E5%9F%BA%E4%BA%8Earrays.binarysearch%E8%A7%A3%E5%86%B3%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fyzn12.github.io/post/algorithm/%E5%9F%BA%E4%BA%8Earrays.binarysearch%E8%A7%A3%E5%86%B3%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>1. Arrays.binarySearch的简单介绍  Arrays.binarySearch构造函数的简单介绍
 1.1 binarySearch(Object[] arr, Object key)  binarySearch(Object[] arr, Object key)
arr:要检索的数组
key:要搜索的值
如果key在数组中，则返回索引值的索引；否则返回-1或者&amp;rdquo;-&amp;ldquo;(插入点)。插入点是索引键将要插入数组的哪一点，即第一个大于该键的元素的索引。
 1.1.1 技巧  [1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；
[2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；
[3] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);
[4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。
 1.1.2 代码  int arrays [] =new int[]{1,3,4,5,8,9};
Arrays.sort(arr);
int a = Arrays.binarySearch(arrays,6);
int b = Arrays.binarySearch(arrays,4);
int c = Arrays.binarySearch(arrays,0);
int d = Arrays.binarySearch(arrays,10);
System.out.println(&amp;ldquo;a = &amp;ldquo;+a +&amp;rdquo;,b = &amp;ldquo; +b +&amp;rdquo;,c = &amp;ldquo; + c +&amp;rdquo;,d = &amp;ldquo;+d);</description>
    </item>
    
  </channel>
</rss>